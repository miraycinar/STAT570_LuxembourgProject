---
title: "Luxembourg Data Project"
author: "Miray"
format: html
editor: visual
---

## Luxembourg Data Project

#### Required Libraries

```{r}

library(dplyr)
library(purrr)
library(readxl)
library(stringr)
library(janitor)
```

#### Download the Data

```{r}
# Download raw Excel


# Data link
url <- "https://github.com/b-rodrigues/rap4all/raw/master/datasets/vente-maison-2010-2021.xlsx"



# Shortened url

#url <- "https://is.gd/1vvBAc"


```

```{r}
raw_data <- tempfile(fileext = ".xlsx")



download.file(url, raw_data, method = "auto", mode = "wb")



sheets <- excel_sheets(raw_data)



read_clean <- function(..., sheet){
  
  read_excel(..., sheet = sheet) |>
    
    mutate(year = sheet)
  
}



raw_data <- map(
  
  sheets,
  
  ~read_clean(raw_data,
              
              skip = 10,
              
              sheet = .) # skip first 10 rows and take all data in the sheet
  
) |>
  
  bind_rows() |>
  
  clean_names()
```

Here we skip the first 10 rows and then take all the data in the sheet because the data in the excel were in a dashboard-like shape so that humans can read it more easily, containing a definition of the data etc.

By skipping the first 10 rows, we obtain the data directly, now machines - here we can say that machine is R in this situation - can read and perform calculations on the data.

#### Check the data

```{r}
summary(raw_data)
```

#### Rename the French column names

Some variables has their names in French. We will change them into English so that it makes more sense for us:

```{r}

raw_data <- raw_data |>

  rename(

    locality = commune,

    n_offers = nombre_doffres,

    average_price_nominal_euros = prix_moyen_annonce_en_courant,

    average_price_m2_nominal_euros = prix_moyen_annonce_au_m2_en_courant,

    average_price_m2_nominal_euros = prix_moyen_annonce_au_m2_en_courant

  ) |>

  mutate(locality = str_trim(locality)) |>

  select(year, locality, n_offers, starts_with("average"))
```

```{r}
raw_data
```

From investigating the raw data, we see some problems with the data we have to fix before making any analysis.

```{r}
raw_data |> 
  filter(grepl("Luxembourg", locality)) |>
  count(locality)
```

Here we see that Luxembourg is written in two different shape.

```{r}
raw_data |>
  filter(grepl("P.tange", locality)) |>
  count(locality)
```

Here we can also see that Petange is written in two different shape. Moreover, average_price_nominal_euros and average_price_m2_nominal_euros columns are in character form, but they should have been in numeric form. To have the data in a proper shape, we have to mutate this values:

```{r}
raw_data <- raw_data |>
  mutate(
    locality = ifelse(grepl("Luxembourg-Ville", locality),
                      "Luxembourg",
                      locality),
         locality = ifelse(grepl("P.tange", locality),
                           "PÃ©tange",
                           locality)
         ) |>
  mutate(across(starts_with("average"),
         as.numeric))
```

After mutation, we see that we receive a warning message saying that some values were turned into NA. This could be because we have non-numerical values in our average_price_nominal_euros and average_price_m2_nominal_euros columns.

When we check our original data set in excel, we see that we actually have some rows have " \* " instead of values:

![](https://raps-with-r.dev/images/obs_hab_xlsx_missing.png)

We have to remove this values before any analysis.
