---
title: "Luxembourg Data Project"
author: "Miray & Ecenaz"
format: html
editor: visual
---

# Luxembourg Data Project

**Luxembourg**, officially the **Grand Duchy of Luxembourg**, is a small landlocked country in Western Europe. It borders Belgium to the west and north, Germany to the east, and France to the south.

### 
Characteristics of the Luxembourg real estate market: Real estate supply does not meet demand 

The Luxembourg real estate market is clearly lacking supply compared to demand. In fact, we note the permanent presence of construction sites for collective works or individual houses. However, the emergence and development of new districts (Cloche d'Or, Kirchberg, Belval,\...) are still not enough to meet the demand for buying and renting real estate.

Supply is still not enough to meet demand and this growth in demand will not stop as the population continues to increase significantly. New workers continue to arrive, attracted by great career prospects and compensation, Statec still reports a need for 5,600 to 7,500 additional housing units per year. However, the real estate market seems to have paused since late 2022.

In this project we are going to import the data that is compiled by the Housing Observatory (*Observatoire de l\'Habitat*). One thing that should be careful regarding this data is, to be aware of the fact that due to inflation, we have to convert nominal prices to real prices so that we can compare actual differences through the years.

#### Required Libraries

```{r}

library(dplyr)
library(purrr)
library(readxl)
library(stringr)
library(janitor)
```

#### Download the Data

```{r}
# Download raw Excel


# Data link
url <- "https://github.com/b-rodrigues/rap4all/raw/master/datasets/vente-maison-2010-2021.xlsx"



# Shortened url

#url <- "https://is.gd/1vvBAc"


```

```{r}
raw_data <- tempfile(fileext = ".xlsx")



download.file(url, raw_data, method = "auto", mode = "wb")



sheets <- excel_sheets(raw_data)



read_clean <- function(..., sheet){
  
  read_excel(..., sheet = sheet) |>
    
    mutate(year = sheet)
  
}



raw_data <- map(
  
  sheets,
  
  ~read_clean(raw_data,
              
              skip = 10,
              
              sheet = .) # skip first 10 rows and take all data in the sheet
  
) |>
  
  bind_rows() |>
  
  clean_names()
```

Here we skip the first 10 rows and then take all the data in the sheet because the data in the excel were in a dashboard-like shape so that humans can read it more easily, containing a definition of the data etc.

By skipping the first 10 rows, we obtain the data directly, now machines - here we can say that machine is R in this situation - can read and perform calculations on the data.

#### Check the data

```{r}
summary(raw_data)
```

#### Rename the French column names

Some variables has their names in French. We will change them into English so that it makes more sense for us:

```{r}

raw_data <- raw_data |>

  rename(

    locality = commune,

    n_offers = nombre_doffres,

    average_price_nominal_euros = prix_moyen_annonce_en_courant,

    average_price_m2_nominal_euros = prix_moyen_annonce_au_m2_en_courant,

    average_price_m2_nominal_euros = prix_moyen_annonce_au_m2_en_courant

  ) |>

  mutate(locality = str_trim(locality)) |>

  select(year, locality, n_offers, starts_with("average"))
```

```{r}
raw_data
```

From investigating the raw data, we see some problems with the data we have to fix before making any analysis.

```{r}
raw_data |> 
  filter(grepl("Luxembourg", locality)) |>
  count(locality)
```

Here we see that Luxembourg is written in two different shape.

```{r}
raw_data |>
  filter(grepl("P.tange", locality)) |>
  count(locality)
```

Here we can also see that Petange is written in two different shape. Moreover, average_price_nominal_euros and average_price_m2_nominal_euros columns are in character form, but they should have been in numeric form. To have the data in a proper shape, we have to mutate this values:

```{r}
raw_data <- raw_data |>
  mutate(
    locality = ifelse(grepl("Luxembourg-Ville", locality),
                      "Luxembourg",
                      locality),
         locality = ifelse(grepl("P.tange", locality),
                           "Pétange",
                           locality)
         ) |>
  mutate(across(starts_with("average"),
         as.numeric))
```

After mutation, we see that we receive a warning message saying that some values were turned into NA. This could be because we have non-numerical values in our average_price_nominal_euros and average_price_m2_nominal_euros columns.

When we check our original data set in excel, we see that we actually have some rows have " \* " instead of values:

![](https://raps-with-r.dev/images/obs_hab_xlsx_missing.png)

We have to remove this values before any analysis.

As can be seen from the raw data, we have some NA values and for the locality we do not have the name of the locality, so we can delete the missing localities.

Moreover, we have total d'offres which means the total offers from every locality. Also we can delete this , or we can put this row not to lose information to another data frame.

Last row of this data frame tells the source of the data, we can also remove this row. Now we are going to form 2 new data sets from the current one. First one will include data on communes, and the second one will include data on national prices.

But, first we need the do the removing process that we mentioned before.

First, removing the source:

```{r}
raw_data <- raw_data |>

  filter(!grepl("Source", locality))

```

To form the first data frame, which is about data on communes.

```{r}
commune_level_data <- raw_data |>

  filter(!grepl("nationale|offres", locality),

         !is.na(locality))

```

And secondly, we create the data for the data on national prices.

```{r}
country_level <- raw_data |>

  filter(grepl("nationale", locality)) |>

  select(-n_offers)

offers_country <- raw_data |>

  filter(grepl("Total d.offres", locality)) |>

  select(year, n_offers)

country_level_data <- full_join(country_level, offers_country) |>

  select(year, locality, n_offers, everything()) |>

  mutate(locality = "Grand-Duchy of Luxembourg")

```

Now resulting we got the clean data, but to be sure we get all the communes for Luxemburg we need to check the communes list using the wikipedia.

In case if someone decides to modify the web page in the future, we save the web page to github.

To get and save the list of the communes fro the Luxemburg we use the code below:

```{r}
current_communes <- "https://is.gd/lux_communes" |>

  rvest::read_html() |>

  rvest::html_table() |>

  purrr::pluck(2) |>

  janitor::clean_names() |>

  dplyr::filter(name_2 != "Name") |>

  dplyr::rename(commune = name_2) |>

  dplyr::mutate(commune = stringr::str_remove(commune, " .$"))
```

For getting the scraped table from the wikipedia we used rvest.

rvest::html_table() function gives the list of the tables using the wikipedia,and then, we use purr::pluck() to save the second table from the site.

Janitor::clean_names() we use this function for re-writing the names that can be used in R, and for the functions that are in the package dplyr, used for more cleaning and changing the names.

Now after all the steps we did above, we can control whether we have all the communes:

```{r}
setdiff(unique(commune_level_data$locality),

        current_communes$commune)

```

We can see that there is a difference between the commune_level_data and current_communes.

Some communes does not in the current_communes.

It's because some reasons, first reason is that there is a difference in the spelling of the communes.

And the second reason is some communes merged into new ones since 2010.

To solve this problem, we should get the list of all the existing communes from 2010 and after,and then we can fix the spelling.

Now we use the list from the wikipedia and do the steps above again.

```{r}
former_communes <- "https://is.gd/lux_former_communes" |>

  rvest::read_html() |>

  rvest::html_table() |>

  purrr::pluck(3) |>

  janitor::clean_names() |>

  dplyr::filter(year_dissolved > 2009)

former_communes

```

From the tibble, we can see that some communes have merged into new ones.

And, we can combine the list of the current and former communes while fixing the spellings.

```{r}
communes <- unique(c(former_communes$name,

                     current_communes$commune))

```

We need to rename some communes

Different spelling of these communes between wikipedia and the data

```{r}
communes[which(communes == "Clemency")] <- "Clémency"

communes[which(communes == "Redange")] <- "Redange-sur-Attert"

communes[which(communes == "Erpeldange-sur-Sûre")] <- "Erpeldange"

communes[which(communes == "Luxembourg City")] <- "Luxembourg"

communes[which(communes == "Käerjeng")] <- "Kaerjeng"

communes[which(communes == "Petange")] <- "Pétange"
```

To test it, we run this code.

```{r}
setdiff(unique(commune_level_data$locality),

        communes)

```

With this code we check that if there is any commune that is not accounted for, and we get the 0, so we are good to go.

Saving the data

First we create the folder called datasets

```{r}
#write.csv(commune_level_data, "datasets/commune_level_data.csv", row.names = TRUE)

#write.csv(country_level_data, "datasets/country_level_data.csv", row.names = TRUE)

```

ANALYSING THE DATA

First we will find a Laspeyeres price index.

With this price index we can understand the change in the time.

We can compare the price, did it increase or decrease and how much is the difference based on the relative year which is 2010.

To compute that we will use the prices at certain year and will divide it by the prices in 2010.

We load the data sets.

```{r}
#write.csv(commune_level_data, "datasets/commune_level_data.csv", row.names = TRUE)

#write.csv(country_level_data, "datasets/country_level_data.csv", row.names = TRUE)

```

We need this packages :

```{r}
library(dplyr)

library(ggplot2)

library(purrr)

library(tidyr)
```

Data sets:

```{r}
#commune_level_data <- read.csv("datasets/commune_level_data.csv")

#country_level_data <- read.csv("datasets/country_level_data.csv")
```

Now we are going the compute the laspeyeres index like we mentioned:

```{r}
commune_level_data <- commune_level_data %>%

  group_by(locality) %>%

  mutate(p0 = ifelse(year == "2010", average_price_nominal_euros, NA)) %>%

  fill(p0, .direction = "down") %>%

  mutate(p0_m2 = ifelse(year == "2010", average_price_m2_nominal_euros, NA)) %>%

  fill(p0_m2, .direction = "down") %>%

  ungroup() %>%

  mutate(pl = average_price_nominal_euros/p0*100,

         pl_m2 = average_price_m2_nominal_euros/p0_m2*100)
```

Now we will find it for the whole country:

```{r}
country_level_data <- country_level_data %>%

  mutate(p0 = ifelse(year == "2010", average_price_nominal_euros, NA)) %>%

  fill(p0, .direction = "down") %>%

  mutate(p0_m2 = ifelse(year == "2010", average_price_m2_nominal_euros, NA)) %>%

  fill(p0_m2, .direction = "down") %>%

  mutate(pl = average_price_nominal_euros/p0*100,

         pl_m2 = average_price_m2_nominal_euros/p0_m2*100)
```

Plotting:

Creating a plot for 7 communes and comparing the price evolution in the communes, to the national price evolution.

Starting with listing the communes

```{r}
communes <- c("Luxembourg",
              "Esch-sur-Alzette",
              "Mamer",
              "Schengen",
              "Wincrange",
              "Bertrange",
              "Wiltz")
```

For Luxembourg:

```{r}
filtered_data <- commune_level_data %>%

  filter(locality == communes[1])

data_to_plot <- bind_rows(

  country_level_data,

  filtered_data

)

lux_plot <- ggplot(data_to_plot) +

  geom_line(aes(y = pl_m2,

                x = year,

                group = locality,

                colour = locality)) +
  labs(title = "Country Average vs. Luxembourg", x = "Years") +
  theme_classic()

lux_plot
```

For Esch sur Alzette

```{r}
filtered_data <- commune_level_data %>%

  filter(locality == communes[2])

data_to_plot <- bind_rows(

  country_level_data,

  filtered_data

)

esch_plot <- ggplot(data_to_plot) +

  geom_line(aes(y = pl_m2,

                x = year,

                group = locality,

                colour = locality)) +
  labs(title = "Country Average vs. Esch sur Alzette", x = "Years") +
  theme_classic()

esch_plot
```

For Mamer

```{r}
filtered_data <- commune_level_data %>%

  filter(locality == communes[3])

data_to_plot <- bind_rows(

  country_level_data,

  filtered_data

)

mamer_plot <- ggplot(data_to_plot) +

  geom_line(aes(y = pl_m2,

                x = year,

                group = locality,

                colour = locality)) +
  labs(title = "Country Average vs. Mamer", x = "Years") +
  theme_classic()

mamer_plot
```

For Schengen

```{r}
filtered_data <- commune_level_data %>%

  filter(locality == communes[4])

data_to_plot <- bind_rows(

  country_level_data,

  filtered_data

)

schengen_plot <- ggplot(data_to_plot) +

  geom_line(aes(y = pl_m2,

                x = year,

                group = locality,

                colour = locality)) +
  labs(title = "Country Average vs. Schengen", x = "Years") +
  theme_classic()

schengen_plot
```

For Wincrange

```{r}
filtered_data <- commune_level_data %>%

  filter(locality == communes[5])

data_to_plot <- bind_rows(

  country_level_data,

  filtered_data

)

wincrange_plot <- ggplot(data_to_plot) +

  geom_line(aes(y = pl_m2,

                x = year,

                group = locality,

                colour = locality)) +
  labs(title = "Country Average vs. Wincrange", x = "Years") +
  theme_classic()

wincrange_plot
```

Now with this process we selected 5 communes and with the plots we can see the evolution of prices compared to the national average.

Bertrange second most expensive plot:

```{r}
filtered_data <- commune_level_data %>%

  filter(locality == communes[6])

data_to_plot <- bind_rows(

  country_level_data,

  filtered_data

)

bertrange_plot <- ggplot(data_to_plot) +

  geom_line(aes(y = pl_m2,

                x = year,

                group = locality,

                colour = locality)) +
  labs(title = "Country Average vs. Betrange", x = "Years") +
  theme_classic()

bertrange_plot

```

Wiltz least expensive amongst all communes.

```{r}
filtered_data <- commune_level_data %>%

  filter(locality == communes[7])

data_to_plot <- bind_rows(

  country_level_data,

  filtered_data

)

wiltz_plot <- ggplot(data_to_plot) +

  geom_line(aes(y = pl_m2,

                x = year,

                group = locality,

                colour = locality)) +
  labs(title = "Country Average vs. Wiltz", x = "Years") +
  theme_classic()

wiltz_plot

```

Most expensive commune Luxembourg and least expensive one Wiltz.

```{r}
filtered_dataWiltz <- commune_level_data %>%

  filter(locality == "Wiltz")

filtered_dataLuxembourg <- commune_level_data %>%

  filter(locality == "Luxembourg")

data_to_plot <- bind_rows(

  filtered_dataLuxembourg,

  filtered_dataWiltz

)

mixplot<- ggplot(data_to_plot) +

  geom_line(aes(y = pl_m2,

                x = year,

                group = locality,

                colour = locality)) + 
  labs(title = "Luxembourg vs. Wiltz", x = "Years") +
  theme_classic()

mixplot
```

Finally, bring all cities together in one plot so that compare all of them:

First we need to filter the cities that we are interested in:

```{r}
filtered_dataLux <- commune_level_data %>%
  
  filter(locality == "Luxembourg")

filtered_dataESA <- commune_level_data %>%
  
  filter(locality == "Esch-sur-Alzette")

filtered_dataMamer <- commune_level_data %>%
  
  filter(locality == "Mamer")

filtered_dataSchengen <- commune_level_data %>%
  
  filter(locality == "Schengen")

filtered_dataWincrange <- commune_level_data %>%
  
  filter(locality == "Wincrange")

filtered_dataBertrange <- commune_level_data %>%
  
  filter(locality == "Bertrange")

filtered_dataWiltz <- commune_level_data %>%
  
  filter(locality == "Wiltz")

filtered_data <- rbind(filtered_dataLux,filtered_dataESA, filtered_dataMamer, filtered_dataSchengen,
                       filtered_dataWincrange, filtered_dataBertrange, filtered_dataWiltz)


```

Then check the plot:

```{r}
data_to_plot <- bind_rows(
  
  country_level_data,
  
  filtered_data
  
)

lux_plot <- ggplot(data_to_plot) +
  
  geom_line(aes(y = pl_m2,
                
                x = year,
                
                group = locality,
                
                colour = locality)) +
  labs(title = "Country Average vs. 7 Cities", x = "Years") +
  theme_classic()

lux_plot
```

#### References

Rodrigues, B. (2023). *Building reproducible analytical pipelines with R*. Bruno Rodrigues.

*Real estate market and prices: What to expect?*. Just Arrived Luxembourg. (2023, July 5). https://www.justarrived.lu/en/housing-of-luxembourg/real-estate-market-and-prices-in-luxembourg/
